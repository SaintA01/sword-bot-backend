// startsession.js - PROPER WHATSAPP CONNECTION
import { makeWASocket, useMultiFileAuthState, fetchLatestBaileysVersion, Browsers } from '@whiskeysockets/baileys';
import fs from 'fs';
import path from 'path';
import { v4 as uuidv4 } from 'uuid';

const SESS_DIR = path.resolve('./sessions');
if (!fs.existsSync(SESS_DIR)) fs.mkdirSync(SESS_DIR, { recursive: true });

export async function startNewSession(ownerNumber = '', onQR) {
  try {
    console.log('🔐 Starting PROPER WhatsApp session...');
    
    const { version, isLatest } = await fetchLatestBaileysVersion();
    console.log(`📱 Using Baileys version: ${version}, isLatest: ${isLatest}`);

    const sessionId = uuidv4();
    const authFolder = path.join(SESS_DIR, `auth_${sessionId}`);
    
    console.log('📁 Auth folder:', authFolder);
    
    const { state, saveCreds } = await useMultiFileAuthState(authFolder);

    // PROPER WhatsApp configuration
    const sock = makeWASocket({
      version,
      auth: state,
      printQRInTerminal: true,
      logger: {
        level: 'silent' // Reduce logs
      },
      // PROPER browser info for WhatsApp
      browser: Browsers.ubuntu('Chrome'),
      // Connection settings
      connectTimeoutMs: 60000,
      keepAliveIntervalMs: 10000,
      // Mark as mobile to enable phone linking
      markOnlineOnConnect: true,
      // Generate high quality QR
      qrTimeout: 60000,
      // Mobile linking support
      mobile: false, // Set to false for QR, true for phone linking
    });

    sock.ev.on('creds.update', saveCreds);

    return new Promise((resolve, reject) => {
      let qrShown = false;
      let connected = false;
      
      console.log('⏳ Waiting for WhatsApp to generate QR...');
      
      const timeout = setTimeout(() => {
        if (!connected) {
          console.log('⏰ WhatsApp connection timeout');
          reject(new Error('WhatsApp took too long to respond. Try again.'));
        }
      }, 120000);

      sock.ev.on('connection.update', async (update) => {
        const { connection, qr, isNewLogin, lastDisconnect } = update;
        
        console.log('📡 WhatsApp connection update:', {
          connection,
          hasQR: !!qr,
          isNewLogin
        });
        
        // Handle QR Code - THIS IS WHAT WHATSAPP NEEDS
        if (qr && !qrShown) {
          console.log('🎯 VALID QR Code generated by WhatsApp');
          qrShown = true;
          
          if (typeof onQR === 'function') {
            try {
              onQR(qr);
              console.log('✅ QR code sent to frontend - This should work with WhatsApp!');
            } catch (e) {
              console.error('❌ Failed to send QR to frontend:', e);
            }
          }
        }
        
        // Handle successful connection
        if (connection === 'open') {
          console.log('✅✅✅ SUCCESS! WhatsApp CONNECTED!');
          connected = true;
          clearTimeout(timeout);
          
          // Send welcome message if owner number provided
          if (ownerNumber && ownerNumber.trim() !== '') {
            try {
              const jid = ownerNumber.includes('@') ? ownerNumber : `${ownerNumber}@s.whatsapp.net`;
              console.log('📤 Sending welcome message to:', jid);
              
              await sock.sendMessage(jid, { 
                text: `🤖 *SWORD BOT ACTIVATED!*\n\nYour session is now connected!\nSession ID: ${sessionId}\n\nBot is ready to use!` 
              });
              
              console.log('✅ Welcome message sent');
            } catch (e) {
              console.warn('⚠️ Could not send welcome message:', e.message);
            }
          }
          
          resolve(sessionId);
        }
        
        // Handle connection closure
        if (connection === 'close') {
          console.log('🔌 WhatsApp connection closed');
          clearTimeout(timeout);
          
          const statusCode = lastDisconnect?.error?.output?.statusCode;
          if (statusCode === 401) {
            reject(new Error('❌ Logged out from WhatsApp. Please scan QR again.'));
          } else if (statusCode === 403) {
            reject(new Error('❌ Connection blocked by WhatsApp. Try again later.'));
          } else if (statusCode === 419) {
            reject(new Error('❌ Session expired. Please scan QR again.'));
          } else {
            reject(new Error(`❌ Connection failed (Code: ${statusCode || 'Unknown'})`));
          }
        }
      });

      // Handle connection failures
      sock.ev.on('connection.failed', (error) => {
        console.error('💥 WhatsApp connection failed:', error);
        clearTimeout(timeout);
        reject(new Error('❌ Failed to connect to WhatsApp servers'));
      });
    });
  } catch (error) {
    console.error('💥 Error starting WhatsApp session:', error);
    throw error;
  }
}
